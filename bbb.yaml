heat_template_version: newton
description: >
  Plantilla de orquestacion para configurar servidor de BBB. Se debe utilizar una imagen con BBB previamente instalado. La plantilla devuelve la url y la llave compartida de BBB. Para la configuracion se utiliza parte del codigo de bbb-conf.

parameters:
  server_name:
    type: string
    label: Nombre del servidor BBB
    description: Nombre del servidor BBB
    default: ""
  key_name:
    type: string
  flavor:
    type: string
  image:
    type: string
  bbb_demo:
    type: string
    label: Cliente demo de BBB
    description: Instalar cliente demo de BBB
    default: ""
  bbb_greenlight:
    type: string
    label: Cliente Greenlight de BBB
    description: Instalar cliente Greenlight de BBB
    default: ""
  private_net:
    type: string
    label: Nombre de la red privada
    description: Nombre de la red privada o su ID
  public_net:
    type: string
    label: Nombre de la red publica
    description: Nombre de la red publica o su ID
  security_groups:
    type: comma_delimited_list
    label: Lista de grupos de seguridad
    description: Lista separada por comas para grupos de seguridad
    default: "default,bbb"
  bbb_domain:
    type: string
    label: Dominio de VM
    description: Dominio de VM
    default: ""
  bbb_nfs_mount:
    type: string
    label: Punto de montaje NFS
    description: Montaje NFS para grabaciones
    default: ""
  bbb_external_hostname:
    type: string
    label: Servidor externo BBB
    description: Nombre de servidor externo BBB
    default: ""
  bbb_recording_hostname:
    type: string
    label: Servidor para grabaciones
    description: Nombre de servidor para grabaciones
    default: ""

resources:
  bbb-server:
    type: OS::Nova::Server
    properties:
      name: {get_param: server_name}
      key_name: {get_param: key_name}
      image: {get_param: image}
      flavor: {get_param: flavor}
      security_groups: {get_param: security_groups}
      networks:
        - network: {get_param: public_net}
        - network: {get_param: private_net}
      metadata:
        layer: "bbb"
        role: "node"
        description: "Servidor y nodo BBB"
        osArch: "x86_64"
        osFamily: "unix"
        osName: "Linux"
        distro: "Ubuntu"
        osVersion: "16.04"
        tags: "bbb,ubuntu,xenial"
        # Para ubicar en diferentes hipervisores
        # scheduler_hints:
          # group: {Ref: haproxy_cluster}
      user_data_format: SOFTWARE_CONFIG

  sw-init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: bbb_url
        description: URL de conexion a BBB
      - name: shared_key_out
        description: Llave compartida de BBB
      config: |
        #!/bin/bash -x
        set -eu
        set -o pipefail

        script=/usr/local/bin/bbb-heat

        cat << "_EOF" > $script
        #!/bin/bash -x
        set -eu
        set -o pipefail

        # heat_vars

        # init config
        echo "${bbb_ip} $(hostname)" >> /etc/hosts
        bbb_playback_host=${bbb_ip}
        HOST=${bbb_ip}
        IP=${bbb_ip}
        SERVLET_CONTAINER=tomcat7
        SERVLET_DIR=/var/lib/$SERVLET_CONTAINER/webapps

        # functions
        error() {
          say "$1" >&2
          exit 1
        }

        # Configuracion DNS
        if ! [[ -z ${bbb_domain+x} ]] && ! [[ -z ${bbb_domain} ]]; then
          if ! [[ -z ${bbb_external_hostname+x} ]] && ! [[ -z ${bbb_external_hostname} ]]; then
            bbb_host="${bbb_external_hostname}"
          else
            bbb_host="bbb${bbb_ip##*.}.${bbb_domain}"
          fi
          echo "${bbb_ip} ${bbb_host}" >> /etc/hosts
          sed -i "s@ssl_certificate /etc/nginx/ssl/.*@ssl_certificate /etc/nginx/ssl/fullchain.pem;@" /etc/nginx/sites-available/bigbluebutton
          sed -i "s@ssl_certificate_key /etc/nginx/ssl/.*@ssl_certificate_key /etc/nginx/ssl/bbb.${bbb_domain}.key;@" /etc/nginx/sites-available/bigbluebutton
          HOST=${bbb_host}
          bbb_playback_host=${HOST}
        fi

        # Configuracion NFS para grabaciones
        if ! [[ -z ${bbb_nfs_mount:-} ]]; then
          if ! [[ -z ${bbb_recording_hostname:-} ]]; then
            echo "${bbb_ip} ${bbb_recording_hostname} #bbb para grabaciones" >> /etc/hosts
            mountpoint -q /var/bigbluebutton/published/ || mount ${bbb_nfs_mount}/var/bigbluebutton/published/ /var/bigbluebutton/published/
            chown tomcat7:tomcat7 /var/bigbluebutton/published/
            mountpoint -q /var/bigbluebutton/unpublished/ || mount ${bbb_nfs_mount}/var/bigbluebutton/unpublished/ /var/bigbluebutton/unpublished/
            chown tomcat7:tomcat7 /var/bigbluebutton/unpublished/
            mountpoint -q /var/bigbluebutton/recording/raw/ || mount ${bbb_nfs_mount}/var/bigbluebutton/recording/raw/ /var/bigbluebutton/recording/raw/
            chown tomcat7:tomcat7 /var/bigbluebutton/recording/raw/
            mountpoint -q /etc/nginx/ssl/ || mount ${bbb_nfs_mount}/etc/nginx/ssl/ /etc/nginx/ssl/
            bbb_playback_host="${bbb_recording_hostname}"
          else
            mkdir /tmp/mnt
            mountpoint -q /tmp/mnt || mount ${bbb_nfs_mount} /tmp/mnt
            if [ ! -d "/tmp/mnt/var/bigbluebutton/" ]; then
              mkdir -p /tmp/mnt/var
              cp -rp /var/bigbluebutton/ /tmp/mnt/var/
            fi
            if [ ! -d "/tmp/mnt/etc/nginx/ssl/" ]; then
              mkdir -p /tmp/mnt/etc/nginx/
              cp -rp /etc/nginx/ssl/ /tmp/mnt/etc/nginx/
            fi
            umount ${bbb_nfs_mount}
            mountpoint -q /var/bigbluebutton/ || mount ${bbb_nfs_mount}/var/bigbluebutton/ /var/bigbluebutton/
            mountpoint -q /etc/nginx/ssl/ ||  ${bbb_nfs_mount}/etc/nginx/ssl/ /etc/nginx/ssl/
          fi
        fi

        # Asignar llave compartida y devolver como parametro
        if ! [[ -z ${shared_key_in:-} ]]; then
            bbb-conf --setsecret ${shared_key_in}
        fi

        # Actualizar IP y reiniciar servicios. En caso de estar detras de un balanceador aca deberia ir el dns del frontend
        # delete duplicate
        file='/opt/freeswitch/conf/sip_profiles/external.xml'
        if [[ $(grep -c 'wss-binding' $file ) > 1 ]]; then
            sed '0,/wss/{//d;}' $file
        fi

        ## SET IP ##
        TARGET=/usr/local/bigbluebutton/bbb-webrtc-sfu/config/default.yml
        if [ -f $TARGET ]; then
        yq w -i $TARGET kurento[0].ip "${IP}"
        yq w -i $TARGET freeswitch.sip_ip "${IP}"
        chown bigbluebutton:bigbluebutton $TARGET
        chmod 644 $TARGET
        fi

        sed -i "s@local_ip_v4=.[^\"]*@local_ip_v4=${IP}@" /opt/freeswitch/etc/freeswitch/vars.xml

        sed -i \
            -e "s@^bbb.sip.app.ip=.*@bbb.sip.app.ip=${IP}@" \
            -e "s@^freeswitch.ip=.*@freeswitch.ip=${IP}@" \
            /usr/share/red5/webapps/sip/WEB-INF/bigbluebutton-sip.properties

        sed -i \
            -e "s@wsUrl: ws.*://\([^\"\/]*\)\([\"\/]\)@wsUrl: wss://${HOST}\2@g" \
            -e "s@url: http.*://\([^\"\/]*\)\([\"\/]\)@url: https://${HOST}\2@g" \
            /usr/share/meteor/bundle/programs/server/assets/app/config/settings.yml

        sed -i \
            -e "s@ ip: .*@ ip: ${IP}@g" \
            -e "s@^localIpAddress:.*@localIpAddress: ${IP}@" \
            /usr/local/bigbluebutton/bbb-webrtc-sfu/config/default.yml

        sed -i "s@^playback_protocol: http.*@playback_protocol: https@g" /usr/local/bigbluebutton/core/scripts/bigbluebutton.yml

        if ! [[ -z ${bbb_recording_hostname:-} ]]; then
            sed -i "s@^playback_host:.*@playback_host: ${bbb_playback_host}@g" /usr/local/bigbluebutton/core/scripts/bigbluebutton.yml
        fi

        sed -i "s@server_name .*@server_name ${HOST};@g" \
            /etc/nginx/sites-available/bigbluebutton

        sed -i "s@proxy_pass http.*@proxy_pass https://${IP}:7443;@g" \
            /etc/bigbluebutton/nginx/sip.nginx

        # from bbb-conf
        sed -i \
            -e "s@porttest host=(\"[^\"]*\")@porttest host=\"$HOST\"@g" \
            -e "s@://\([^\"\/]*\)\([\"\/]\)@:\/\/$HOST\2@g" \
            /var/www/bigbluebutton/client/conf/config.xml

        sed -i "s/server_name  .*/server_name  $HOST;/g" /etc/nginx/sites-available/bigbluebutton

        sed -i \
            -e "s@bigbluebutton.web.serverURL=http.*@bigbluebutton.web.serverURL=https://${HOST}@" \
            -e "s@screenshareRtmpServer=.*@screenshareRtmpServer=${HOST}@" \
            /usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties

        if [ -f ${SERVLET_DIR}/demo/bbb_api_conf.jsp ]; then
            sed -i "s@://\([^\"\/]*\)\([\"\/]\)@:\/\/$HOST\2@g"  \
        		${SERVLET_DIR}/demo/bbb_api_conf.jsp
        fi

        if [ -f ${SERVLET_DIR}/lti/WEB-INF/classes/lti.properties ]; then
        	sed -i \
                -e "s@bigbluebuttonURL=http.*@bigbluebuttonURL=https://$HOST/bigbluebutton@g" \
                -e "s@ltiEndPoint=http.*@ltiEndPoint=https://$HOST/lti/tool.xml@g" \
        	${SERVLET_DIR}/lti/WEB-INF/classes/lti.properties
        fi
        ## END SET IP ##

        # start bbb
        bbb-conf --clean

        # Instalar greenlight si es requerido
        # From bbb-install
        if ! [[ -z ${is_bbb_greenlight:-} ]]; then
          DEBIAN_FRONTEND=noninteractive LC_CTYPE=C.UTF-8 apt-get install -y \
            openssl apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          # Install Docker
          if ! apt-key list | grep -q Docker; then
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          fi
          if ! dpkg -l | grep -q docker-ce; then
            add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"
            apt-get update
            DEBIAN_FRONTEND=noninteractive LC_CTYPE=C.UTF-8 apt-get install -y docker-ce
          fi
          if ! which docker; then error "Docker did not install"; fi
          if [ ! -x /usr/local/bin/docker-compose ]; then
            curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi

          if [ ! -d ~/greenlight ]; then
            mkdir -p ~/greenlight
          fi

          # This will trigger the download of Greenlight docker image (if needed)
          SECRET_KEY_BASE=$(docker run --rm bigbluebutton/greenlight:v2 bundle exec rake secret)

          if [ ! -f ~/greenlight/.env ]; then
            docker run --rm bigbluebutton/greenlight:v2 cat ./sample.env > ~/greenlight/.env
          fi

          BIGBLUEBUTTON_URL=$(cat /usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties | grep -v '#' | sed -n '/^bigbluebutton.web.serverURL/{s/.*=//;p}')/bigbluebutton/
          BIGBLUEBUTTON_SECRET=$(cat /usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties   | grep -v '#' | grep securitySalt | cut -d= -f2)

          # Update Greenlight configuration file in ~/greenlight/env
          sed -i "s|SECRET_KEY_BASE=.*|SECRET_KEY_BASE=$SECRET_KEY_BASE|"                   ~/greenlight/.env
          sed -i "s|.*BIGBLUEBUTTON_ENDPOINT=.*|BIGBLUEBUTTON_ENDPOINT=$BIGBLUEBUTTON_URL|" ~/greenlight/.env
          sed -i "s|.*BIGBLUEBUTTON_SECRET=.*|BIGBLUEBUTTON_SECRET=$BIGBLUEBUTTON_SECRET|"  ~/greenlight/.env

          # need_pkg bbb-webhooks

          if [ ! -f /etc/bigbluebutton/nginx/greenlight.nginx ]; then
            docker run --rm bigbluebutton/greenlight:v2 cat ./greenlight.nginx | tee /etc/bigbluebutton/nginx/greenlight.nginx
            cat > /etc/bigbluebutton/nginx/greenlight-redirect.nginx << HERE
        location = / {
          return 307 /b;
        }
        HERE
            systemctl restart nginx
          fi

          if ! gem list | grep -q java_properties; then
            gem install jwt java_properties
          fi

          if [ ! -f ~/greenlight/docker-compose.yml ]; then
            docker run --rm bigbluebutton/greenlight:v2 cat ./docker-compose.yml > ~/greenlight/docker-compose.yml
          fi

          # change the default passwords
          PGPASSWORD=$(openssl rand -hex 8)
          sed -i "s/POSTGRES_PASSWORD=password/POSTGRES_PASSWORD=$PGPASSWORD/g" ~/greenlight/docker-compose.yml
          sed -i "s/DB_PASSWORD=password/DB_PASSWORD=$PGPASSWORD/g" ~/greenlight/.env

          # Remove old containers
          if docker ps | grep -q greenlight_db_1; then
            docker rm -f greenlight_db_1
          fi
          if docker ps | grep -q greenlight-v2; then
            docker rm -f greenlight-v2
          fi

          if ! docker ps | grep -q greenlight; then
            docker-compose -f ~/greenlight/docker-compose.yml up -d
            sleep 5
          fi
        fi

        # Instalar demo si es requerido
        if ! [[ -z ${is_bbb_demo:-} ]]; then
          DEBIAN_FRONTEND=noninteractive LC_CTYPE=C.UTF-8 apt-get install -y install bbb-demo
          if [ -f /var/lib/tomcat7/webapps/demo/bbb_api_conf.jsp ]; then
            sed -i "s@^String BigBlueButtonURL.*@String BigBlueButtonURL = \"https://${HOST}/bigbluebutton/\";@" /var/lib/tomcat7/webapps/demo/bbb_api_conf.jsp
          else
            sleep 30
            sed -i "s@^String BigBlueButtonURL.*@String BigBlueButtonURL = \"https://${HOST}/bigbluebutton/\";@" /var/lib/tomcat7/webapps/demo/bbb_api_conf.jsp
          fi
        else
          apt-get purge -y bbb-demo
        fi
        _EOF
        chmod +x /usr/local/bin/bbb-heat

        [ -z "${bbb_ip:-}" ] || sed -i  "/^# heat_vars/a bbb_ip='${bbb_ip}'" $script
        [ -z "${is_bbb_demo:-}" ] || sed -i   "/^# heat_vars/a is_bbb_demo='${is_bbb_demo}'" $script
        [ -z "${is_bbb_greenlight:-}" ] || sed -i   "/^# heat_vars/a is_bbb_greenlight='${is_bbb_greenlight}'" $script
        [ -z "${bbb_domain:-}" ] || sed -i "/^# heat_vars/a bbb_domain='${bbb_domain}'" $script
        [ -z "${bbb_recording_hostname:-}" ] || sed -i "/^# heat_vars/a bbb_recording_hostname='${bbb_recording_hostname}'" $script
        [ -z "${bbb_nfs_mount:-}" ] || sed -i "/^# heat_vars/a bbb_nfs_mount='${bbb_nfs_mount}'" $script
        [ -z "${bbb_external_hostname:-}" ] || sed -i "/^# heat_vars/a bbb_external_hostname='${bbb_external_hostname}'" $script
        [ -z "${shared_key_in:-}" ] || sed -i "/^# heat_vars/a shared_key_in='${shared_key_in}'" $script

        # run bbb init script
        $script > /tmp/bbb-heat.log

        # check status
        bbb-conf --status | grep failed && error "bbb-status failed"

        # Devolver url y llave compartida
        bbb-conf --secret | grep -i url: | awk '{print $2}' > ${heat_outputs_path}.bbb_url
        bbb-conf --secret | grep -i secret: | awk '{print $2}' > ${heat_outputs_path}.shared_key_out

  bbb-server-init:
    type: OS::Heat::SoftwareDeployment
    properties:
      actions: ['CREATE','UPDATE']
      config: {get_resource: sw-init}
      server: {get_resource: bbb-server}
      input_values:
        bbb_ip: {get_attr: [bbb-server, networks, {get_param: public_net}, 0]}
        is_bbb_demo: {get_param: bbb_demo}
        is_bbb_greenlight: {get_param: bbb_greenlight}
        bbb_domain: {get_param: bbb_domain}
        bbb_recording_hostname: {get_param: bbb_recording_hostname}
        bbb_nfs_mount: {get_param: bbb_nfs_mount}
        bbb_external_hostname: {get_param: bbb_external_hostname}

outputs:
  server:
    description: >
      Recurso para llamar instancia BBB.
    value: {get_resource: bbb-server}
  public_ip:
    description: >
      IP publica de la instancia
    value: {get_attr: [bbb-server, networks, {get_param: public_net}, 0]}
  private_ip:
    description: >
      IP privada de la instancia
    value: {get_attr: [bbb-server, networks, {get_param: private_net}, 0]}
  name:
    description: >
      Nombre de instancia
    value: {get_attr: [bbb-server, name]}
  bbb_url:
    description: >
      URL de conexion a API de BBB
    value: {get_attr: [bbb-server-init, bbb_url]}
  bbb_shared_key:
    description: >
      Llave compartida de BBB
    value: {get_attr: [bbb-server-init, shared_key_out]}
